# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest mypy # Add mypy here
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Generate and Test Stubs (stubtest)
      run: |
        # Assuming your main package is named 'dobotWrapperPy'
        # And you want to generate stubs into a 'stubs' directory at the root of your repo

        # Optional: Install your project in editable mode if it's a local package
        # This makes it importable for stubgen/stubtest
        # Adjust 'dobotWrapperPy' to the actual name of your package directory
        if [ -d dobotWrapperPy ]; then # Check if the directory exists
            pip install -e .
        fi

        # Generate stubs if they are not committed, or if you want to regenerate them
        # This creates stubs/dobotWrapperPy/__init__.pyi, stubs/dobotWrapperPy/paramsStructures.pyi, etc.
        # You might need to adjust 'dobotWrapperPy' to your actual package name.
        stubgen -p dobotWrapperPy -o stubs/

        # Run stubtest to check consistency
        # You need to tell stubtest where to find your custom stubs.
        # This typically involves creating a mypy.ini file or using --custom-typeshed-dir.
        # For simplicity, let's assume a mypy.ini for configuration.

        stubtest dobotWrapperPy --mypy-config mypy.ini

    - name: Test with pytest
      run: |
        pytest
